<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdk on 冰灯</title>
    <link>https://huayuye.github.io/blog/tags/jdk/</link>
    <description>Recent content in jdk on 冰灯</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>CC BY 4.0 CN</copyright>
    <lastBuildDate>Thu, 25 Nov 2021 18:37:20 +0800</lastBuildDate>
    
        <atom:link href="https://huayuye.github.io/blog/tags/jdk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Springboot Rabbitmq</title>
      <link>https://huayuye.github.io/blog/2021/12/springboot-rabbitmq/</link>
      <pubDate>Wed, 08 Dec 2021 10:42:14 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/springboot-rabbitmq/</guid>
      <description>前言 由于公司的项目业务越来越繁杂，需要使用消息中间件的为服务进行一定的减压，所以就去了解些中间件，最后选了rabbitMQ。 一、消息中间件适</description>
    </item>
    
    <item>
      <title>Java Rabbitmq</title>
      <link>https://huayuye.github.io/blog/2021/12/java-rabbitmq/</link>
      <pubDate>Wed, 08 Dec 2021 10:41:47 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/java-rabbitmq/</guid>
      <description>之前项目中只是单纯的使用其中的一种方式，这里介绍下其他的方式 一、生产者 1、创建服务连接 private static ConnectionFactory connectionFactory = null; static { connectionFactory = new ConnectionFactory(); connectionFactory.setHost(&amp;quot;192.168.43.120&amp;quot;); connectionFactory.setPort(5672); connectionFactory.setUsername(&amp;quot;root&amp;quot;); connectionFactory.setPassword(&amp;quot;root&amp;quot;); // connectionFactory.setVirtualHost(&amp;quot;/&amp;quot;); } 2、定义队列 public static</description>
    </item>
    
    <item>
      <title>Rabbitmq Work Model</title>
      <link>https://huayuye.github.io/blog/2021/12/rabbitmq-work-model/</link>
      <pubDate>Wed, 08 Dec 2021 10:38:06 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/rabbitmq-work-model/</guid>
      <description>RabbitMQ基于erlang语言： 是一种支持高并发的语言 RabbitMQ的工作模式 1. simple简单模式 （1）消息产生者将消息放入队列 （</description>
    </item>
    
    <item>
      <title>Centos安装Nginx</title>
      <link>https://huayuye.github.io/blog/2021/12/centos-nginx/</link>
      <pubDate>Wed, 08 Dec 2021 10:30:04 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/centos-nginx/</guid>
      <description>一. 安装 1、gcc 安装 安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装： yum install gcc-c++ 2. PCRE pcre-devel 安装 PCRE(Perl Compatible Regular Expressions) 是一个Per</description>
    </item>
    
    <item>
      <title>String Pool</title>
      <link>https://huayuye.github.io/blog/2021/12/string-pool/</link>
      <pubDate>Wed, 08 Dec 2021 10:26:38 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/string-pool/</guid>
      <description>前言 这里是基于JDK8版本探究的。 JDK7及之后有所变化: 将String常量池 从 Perm 区移动到了 Java Heap区,String的intern 方法时，</description>
    </item>
    
    <item>
      <title>Springboot Dubbo Cluster</title>
      <link>https://huayuye.github.io/blog/2021/12/springboot-dubbo-cluster/</link>
      <pubDate>Wed, 08 Dec 2021 10:20:44 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/springboot-dubbo-cluster/</guid>
      <description>建议且规定 起码三台或以上奇数台机器。 一、服务器三台 ： server1(x.x.x.221) server2(x.x.x.222) server3(x.x.x.223) 1、每台服务器上均要放 zookeeper 2、将zookeeper-3.4.12.tar.gz解压到</description>
    </item>
    
    <item>
      <title>Springboot Dubbo</title>
      <link>https://huayuye.github.io/blog/2021/12/springboot-dubbo/</link>
      <pubDate>Wed, 08 Dec 2021 10:18:06 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/springboot-dubbo/</guid>
      <description>一、下载并安装zookeeper dubbo的注册中可以选redis，zookeeper等，这里使用zookeeper作为dubbo的注册中心</description>
    </item>
    
    <item>
      <title>Elasticsearch Java Api</title>
      <link>https://huayuye.github.io/blog/2021/12/elasticsearch-java-api/</link>
      <pubDate>Wed, 08 Dec 2021 10:15:24 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/elasticsearch-java-api/</guid>
      <description>1、初始化一个 RestHighLevelClien RestHighLevelClient client = new RestHighLevelClient( RestClient.builder( new HttpHost(&amp;quot;localhost&amp;quot;, 9200, &amp;quot;http&amp;quot;), new HttpHost(\&amp;quot;localhost\&amp;quot;, 9201, \&amp;quot;http\&amp;quot;))); 这里可以一次创建多个es的连接 2、查询 （1）get api //创建查询请求 GetRequest getRequest = new GetRequest(_index,_type,_id); //发起请求 GetResponse getResponse =</description>
    </item>
    
    <item>
      <title>Logstash Grok</title>
      <link>https://huayuye.github.io/blog/2021/12/logstash-grok/</link>
      <pubDate>Wed, 08 Dec 2021 10:11:19 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/logstash-grok/</guid>
      <description>前言 logstash grok 内置patterns: http://grokdebug.herokuapp.com/patterns 测试patterns 工具： http://grokdebug.herokuapp.com/ \ngrok plugin doc: https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html 1、利用内置的规则过滤 （1）官网示例 log 55.3.244.1 GET /index.html 15824 0.043 filter pattern:%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration} （2）测试用</description>
    </item>
    
    <item>
      <title>Elk Install</title>
      <link>https://huayuye.github.io/blog/2021/12/elk-install/</link>
      <pubDate>Wed, 08 Dec 2021 10:05:08 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/elk-install/</guid>
      <description>准备 下载相应的安装包：https://www.elastic.co/downloads，我这里用的5.6.3版本的。 Logstash：日志收</description>
    </item>
    
    <item>
      <title>Jersey</title>
      <link>https://huayuye.github.io/blog/2021/12/jersey/</link>
      <pubDate>Wed, 08 Dec 2021 10:01:55 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/jersey/</guid>
      <description>前言 jersey 框架：支持将文件上传到另一台的服务器上（tomcat为例）） 这里是直接使用tomcat搭建的一个文件服务器，搭建过程就不多蝉诉了 代码 package</description>
    </item>
    
    <item>
      <title>Let Encrypt</title>
      <link>https://huayuye.github.io/blog/2021/12/let-encrypt/</link>
      <pubDate>Wed, 08 Dec 2021 09:54:59 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/let-encrypt/</guid>
      <description>前言 之前一直想在nginx中配置网站使用https协议访问， 第一、https协议更加安全， 第二、自己也想学习配置一下。 一、letsencry</description>
    </item>
    
    <item>
      <title>Git Command</title>
      <link>https://huayuye.github.io/blog/2021/12/git-command/</link>
      <pubDate>Wed, 08 Dec 2021 09:30:52 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/12/git-command/</guid>
      <description>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓</description>
    </item>
    
    <item>
      <title>Nginx上传文件500</title>
      <link>https://huayuye.github.io/blog/2021/11/nginx-file-500/</link>
      <pubDate>Fri, 26 Nov 2021 09:41:21 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/11/nginx-file-500/</guid>
      <description>前言 今天使用nginx做负载，在上传图片时，一直报500错误（Internal Server Error 500）， 开始已为是程序问题，但是在本地上传是没有问题的。</description>
    </item>
    
    <item>
      <title>Mq Error, Recovery.Dets</title>
      <link>https://huayuye.github.io/blog/2021/11/mq-recovery-dets/</link>
      <pubDate>Fri, 26 Nov 2021 09:29:39 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/11/mq-recovery-dets/</guid>
      <description>一、服务启动报错 ERROR com.rabbitmq.client.impl.ForgivingExceptionHandler - An unexpected connection driver error occured java.net.SocketException: socket closed 二、根据错误显示，大概是MQ的问题： 1、开始以为是 Virtual Hosts / 下的用户没远程登录权限 结果设置还是没用 2、后</description>
    </item>
    
    <item>
      <title>Java Meta Annotation</title>
      <link>https://huayuye.github.io/blog/2021/11/java-meta-annotation/</link>
      <pubDate>Thu, 25 Nov 2021 18:43:08 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/11/java-meta-annotation/</guid>
      <description>注解 JDK1.5版本才有的，理解为元数据，即描述数据的数据。 注解里面没有业务逻辑。 理解 注解是元数据，描述数据的数据 注解不涉及逻辑处理，用户可</description>
    </item>
    
    <item>
      <title>Jdk Tool</title>
      <link>https://huayuye.github.io/blog/2021/11/jdk-tool/</link>
      <pubDate>Thu, 25 Nov 2021 18:37:20 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/11/jdk-tool/</guid>
      <description>1、 jps 列出已装载的JVM 请参考文档。 2、 jstack 打印线程堆栈信息 请参考文档。 3、jstat JVM监控统计信息，包括类的加载和卸载情况，新生代和老年</description>
    </item>
    
    <item>
      <title>Binary Convert(二进制之转换)</title>
      <link>https://huayuye.github.io/blog/2021/11/binary-convert/</link>
      <pubDate>Thu, 25 Nov 2021 18:30:35 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/11/binary-convert/</guid>
      <description>关于本人之前遇到的一个位运算问题，简单的作了下分析，如有错误，望指正。 /** * 二进制 逢二进一 * 八进制 逢八进一 * 十进制 逢十进一 * 十六进制 逢十六进一</description>
    </item>
    
    <item>
      <title>Mybatis Where的坑</title>
      <link>https://huayuye.github.io/blog/2021/11/mybatis-where/</link>
      <pubDate>Thu, 25 Nov 2021 18:20:06 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/11/mybatis-where/</guid>
      <description>mybatis where 标签的一个小坑，被我踩下去了. 为什么我会踩这个坑，只是因为我在模糊查询时，不想使用${},而使用另一个标签。 标签的作用就是将 传过来的参数</description>
    </item>
    
    <item>
      <title>Gradle Vm</title>
      <link>https://huayuye.github.io/blog/2021/11/gradle-vm/</link>
      <pubDate>Thu, 25 Nov 2021 09:46:00 +0800</pubDate>
      
      <guid>https://huayuye.github.io/blog/2021/11/gradle-vm/</guid>
      <description>之前因为每次idea加载项目都初始化index等时，gradle一致提示内存空间不足，于是就对gradle进行了配置 配置 1、需要在gradl</description>
    </item>
    
  </channel>
</rss>
